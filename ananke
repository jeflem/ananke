#!/usr/bin/env python3

import argparse
import logging
import os
from subprocess import run, CalledProcessError
from typing import List, Tuple

LOG_FORMAT = '%(asctime)s %(levelname)s: %(message)s'
LOG_FILE = 'ananke.log'

IMG_DEF_DIR = 'images'
IMG_PREFIX = 'ananke-'

CONT_DEF_DIR = 'containers'
CONT_IGNORE_PREFIX = 'template'
CONFIG_FILE = 'config.py'
CONT_PREFIX = 'ananke-'

DEFAULT_VOLUMES = [
    ('dyn_home', '/var/lib/private'),
    ('home', '/home'),
    ('jupyterhub_config.d', '/opt/conda/envs/jhub/etc/jupyterhub/jupyterhub_config.d')
]

NVIDIA_YAML = '/etc/cdi/nvidia.yaml'

DOWNLOAD_URL = 'https://gauss.whz.de/ananke/DOWNLOAD_NAME.tar.gz'
DOWNLOAD_NAMES = ['ananke-base', 'ananke-nbgrader']

COLOR_RESET = '\x1b[0m'
COLOR_BOLD = '\x1b[1m'
COLOR_RED = '\x1b[31m'

BASE_PATH = os.path.abspath(os.path.dirname(__file__))

logger = logging.getLogger(__name__)


def shell(cmd: str) -> List[str]:
    """
    Run a shell command and return its output and exit status.

    Parameters
    ----------
    cmd : str
        A string representing the command to execute and its arguments.
        The first item is the command to run, and subsequent items are arguments to the command.

    Returns
    -------
    List[str]
        A list of strings, where each string is a line from the standard output of the command.
    """

    logger.info(f'Executing shell command "{cmd}".')
    result = run(cmd, capture_output=True, text=True, shell=True, check=True)
    logger.info('Shell command\'s output:\n' + result.stdout)

    return result.stdout.split('\n')


def get_img_defs() -> List[str]:
    """
    Return sorted list of available image definitions.

    Returns
    -------
    List[str]
        A sorted list of subdirectory names containing image definitions.
    """

    img_defs = []
    path = f'{BASE_PATH}/{IMG_DEF_DIR}'
    logger.info(f'Looking for image definitions in {path}...')
    for name in os.listdir(path):
        if name.startswith(IMG_PREFIX) and os.path.isdir(f'{path}/{name}'):
            img_defs.append(name)

    return sorted(img_defs)


def get_imgs() -> List[Tuple[str, str, str]]:
    """
    Return list of available images.

    Returns
    -------
    List[Tuple[str, str, str]]
        List of (repo, name, tag) tuples for all images.
    """

    imgs = []
    for line in shell('podman image ls')[1:-1]:  # first line is header, last line is empty
        repo_and_name, tag, _ = line.split(maxsplit=2)
        if '/' not in repo_and_name:
            continue
        repo, name = repo_and_name.rsplit('/', maxsplit=1)
        tag = tag if tag != '<none>' else ''
        if name.startswith(IMG_PREFIX):
            imgs.append((repo, name, tag))

    return imgs


def get_cont_defs() -> List[str]:
    """
    Return sorted list of available container definitions.

    Returns
    -------
    List[str]
        List of subdirectory names containing container definitions.
    """

    cont_defs = []
    path = f'{BASE_PATH}/{CONT_DEF_DIR}'
    logger.info(f'Looking for container definitions in {path}...')
    for name in os.listdir(path):
        if not name.startswith(CONT_IGNORE_PREFIX) and os.path.isdir(f'{path}/{name}'):
            cont_defs.append(name)

    return sorted(cont_defs)


def get_conts() -> List[Tuple[str, str]]:
    """
    Return list of available containers.

    Returns
    -------
    List[Tuple[str, str]]
        List of (container_name, image_name) tuples for all containers.
    """

    conts = []
    for line in shell('podman ps -a')[1:-1]:  # first line is header, last line is empty
        _, cont_name = line.rsplit(maxsplit=1)
        _, img, _ = line.split(maxsplit=2)
        if cont_name.startswith(CONT_PREFIX):
            conts.append((cont_name, img))

    return conts


def choose(items: List[str], default: int) -> int:
    """
    Let user choose one item from a list.

    Parameters
    ----------
    items : List[str]
        Items to choose from.
    default : int
        Index of default item.

    Returns
    -------
    int
        Index of chosen item.
    """

    n = len(items)

    while True:
        for i, item in enumerate(items):
            print(f'{i+1:2}) {item}')

        choice = input(f'Choose 1-{n} [{default+1}]: ').strip()
        if choice == '':
            return default

        try:
            choice = int(choice) - 1
            if 0 <= choice < n:
                return choice
        except ValueError:
            pass

        print('ERROR: invalid input! Please enter a number between 1 and', n)


def ask_yes(default: bool) -> bool:
    """
    Let user choose between yes and no.

    Parameters
    ----------
    default : bool
        Default answer (False == no).

    Returns
    -------
    bool
        Answer (False == no).
    """

    default_choice = 'y' if default else 'n'

    while True:
        choice = input(f'y/yes or n/no [{default_choice}]: ').strip().lower()

        if choice == '':
            return default
        elif choice in ['y', 'yes']:
            return True
        elif choice in ['n', 'no']:
            return False
        else:
            print('ERROR: invalid input!')

def ask_int(low: int, high: int, default: int) -> int:
    """
    Let user input an integer.

    Parameters
    ----------
    low : int
        Lowest allowed value.
    high : int
        Highest allowed value.
    default: int
        Default value.

    Returns
    -------
    int
        Chosen integer.
    """

    range_text = f'{low if low is not None else "-∞"}...{high if high is not None else "+∞"}'

    while True:
        value = input(f'integer {range_text} [{default}]: ').strip()

        if value == '':
            return default

        try:
            value = int(value)
            if (not low or value >= low) and (not high or value <= high):
                return value
        except ValueError:
            pass

        print('ERROR: invalid input!')


def load_config(path: str) -> dict:
    """
    Read container config file.

    Parameters
    ----------
    path : str
        Path of config file.

    Returns
    -------
    dict
        Content of config file (None if error).
    """

    config = dict()
    try:
        with open(path) as f:
            config_code = f.read()
    except (PermissionError, FileNotFoundError, OSError) as e:
        print(f'ERROR: Container config file {path} could not be read!')
        logger.error(f'Reading operation of container config file at {path} failed with ({type(e).__name__})')
        return config
    exec(config_code)

    return config


def subcmd_build(args) -> None:
    """
    Build a container image based on user-selected image definitions.

    Parameters
    ----------
    args : any
        Arguments passed from the command line interface (currently not used).

    Returns
    -------
    None
        This function does not return a value; it prints the build process status to the console.
    """

    # ask for image definition
    img_defs = get_img_defs()
    print(f'{COLOR_BOLD}Which image definition shall be used?{COLOR_RESET}')
    choice = choose(items=img_defs, default=0)
    img_def = img_defs[choice]

    # ask for image tag
    print(f'Image name will be "localhost/{img_def}:TAG".')
    tag = input('Choose a tag [latest]: ')
    if tag == '':
        tag = 'latest'

    # build image
    name = f'{img_def}:{tag}'
    print(f'Building image "{name}" from image definition "{img_def}" (this may take several minutes)...')
    try:
        shell(f'podman build --tag={name} "{BASE_PATH}/{IMG_DEF_DIR}/{img_def}"')
        print('...done')
    except (KeyboardInterrupt, CalledProcessError) as e:
        print(f'ERROR: Build of container failed! See file {LOG_FILE} for details.')
        logger.error(f'Build of container failed with ({type(e).__name__})')
        print('Removing broken image.')

        images = shell('podman images --filter "dangling=true" -q')
        for image in images:
            shell(f'podman rmi -f {image}')


def subcmd_create(args):

    # Some hints
    print(f'{COLOR_BOLD}Before creating an Ananke container check that{COLOR_RESET}')
    print('  1. you have chosen a template container definition,')
    print('  2. you have made a copy of corresponding template directory in "containers" directory,')
    print('  3. you have set image name and port in the container definition\'s "config.py",')
    print('  4. you have set c.JupyterHub.base_url in "containers/YOUR_CONTAINER/jupyterhub_config.d/00_base.py",')
    print('  5. you have adjusted other settings in "containers/YOUR_CONTAINER/jupyterhub_config.d".')
    print('Do you want to proceed?')
    if not ask_yes(True):
        print('Aborting...')
        return

    # choose container definition
    cont_defs = get_cont_defs()
    print(f'{COLOR_BOLD}Which container definition shall be used?{COLOR_RESET}')
    choice = choose(items=cont_defs, default=0)
    cont_def = cont_defs[choice]
    cont_name = f'{CONT_PREFIX}{cont_def}'

    # check whether container already exists
    conts = get_conts()
    if any([name == cont_name for name, _ in conts]):
        print('ERROR: Container already exists! Remove container before creating a new one.')
        return

    # load container config
    path = f'{BASE_PATH}/{CONT_DEF_DIR}/{cont_def}/{CONFIG_FILE}'
    config = load_config(path)
    if not config:
        print('Not creating container.')
        return

    # check config
    required = ['image_name', 'port']
    if not all([r in config for r in required]):
        print(f'ERROR: One of keys {required} missing in container config file! Not creating container.')
    if 'podman_args' not in config:
        config['podman_args'] = []
    if 'volumes' not in config:
        config['volumes'] = []

    # check memory limit
    if config.get('memory') == 'interactive':
        try:
            print(f'{COLOR_BOLD}How much memory the container is allowed to use (in gigabytes)?{COLOR_RESET}')
            memory = shell('grep MemTotal /proc/meminfo')
            max_mem = int(int(memory[0].split()[1]) / 1024 / 1024)
        except (CalledProcessError, IndexError, AttributeError, ValueError, ZeroDivisionError):
            max_mem = None

        if max_mem:
            default = int(max_mem / 2)
        else:
            default = 8

        mem = ask_int(low=1, high=max_mem, default=default)
        config['memory'] = f'{mem}g'

    elif config.get('memory') == 'max':
        config.pop('memory')

    # check CPU limit
    if config.get('cpus') == 'interactive':
        try:
            print(f'{COLOR_BOLD}How many CPUs (cores) the container is allowed to use?{COLOR_RESET}')
            cpus = shell('nproc')
            max_cpus = int(cpus[0])
        except (CalledProcessError, IndexError, ValueError, TypeError):
            max_cpus = None

        cpus = ask_int(low=1, high=max_cpus, default=max_cpus)
        config['cpus'] = f'{cpus}'

    elif config.get('cpus') == 'max':
        config.pop('cpus')

    # check GPUs
    gpu_devices = []
    if config.get('gpus') == 'interactive':

        gpus = []
        try:
            for line in shell(f'grep "name:" {NVIDIA_YAML}'):
                splitted = line.strip().split()
                if splitted[0] == 'name:':
                    gpus.append(splitted[1].strip('"'))
        except KeyboardInterrupt:
            return
        except (CalledProcessError, TypeError, AttributeError, IndexError, ValueError):
            pass

        print(f'{COLOR_BOLD}Which GPU devices shall be accessible inside the container?{COLOR_RESET}')
        if not gpus:
            input('No NVIDIA GPUs detected. Press return to proceed.')
        else:
            print('Available GPUs:')
            for gpu in gpus:
                print(f'  {gpu}')

            chosen_gpus = []
            while True:
                choice = input('comma separated list of GPU names [no GPUs]: ').strip()

                if not choice:
                    break
                else:
                    choice_valid = True

                    for gpu in choice.split(','):
                        gpu = gpu.strip()
                        if gpu in gpus:
                            chosen_gpus.append(gpu)
                        else:
                            print(f'GPU name "{gpu}" invalid!')
                            choice_valid = False

                    if choice_valid:
                        break

            for gpu in chosen_gpus:
                gpu_devices.append(f'nvidia.com/gpu={gpu}')

    elif isinstance(config.get('gpus'), str):
        quot = '"'
        gpu_devices.append(f'nvidia.com/gpu={config["gpus"].strip().strip(quot)}')

    elif isinstance(config.get('gpus'), list):
        quot = '"'
        for gpu in config['gpus']:
            gpu_devices.append(f'nvidia.com/gpu={gpu.strip().strip(quot)}')

    # default volumes
    config['volumes'].extend(DEFAULT_VOLUMES)

    # create directories for volumes and make paths absolute
    cont_path = f'{BASE_PATH}/{CONT_DEF_DIR}/{cont_def}'
    for i, (src, dest) in enumerate(config['volumes']):
        if not src.startswith('/'):
            src = f'{cont_path}/{src}'
            config['volumes'][i] = (src, dest)

        try:
            shell(f'mkdir -p "{src}"')
        except (KeyboardInterrupt, CalledProcessError) as e:
            print(f'ERROR: Creating directory {src} failed! Not creating container.')
            logger.error(f'Creating directory at {src} failed with ({type(e).__name__})')

    # create container
    cmd = 'podman create --cap-add=SYS_ADMIN'
    cmd += f' --name="{cont_name}"'
    cmd += f' --publish={config["port"]}:8000'
    for src, dest in config['volumes']:
        cmd += f' --mount=type=bind,source="{src}",destination="{dest}"'
    for arg in config['podman_args']:
        cmd += f' {arg}'
    if 'memory' in config:
        cmd += f' --memory={config["memory"]}'
    if 'cpus' in config:
        cmd += f' --cpus={config["cpus"]}'
    for dev in gpu_devices:
        cmd += f' --device={dev}'
    cmd += f' "{config["image_name"]}"'

    try:
        shell(cmd)
    except CalledProcessError as e:
        print(f'ERROR: Container creation failed! See {LOG_FILE} for details.')
        logger.error(f'Container creation failed with ({type(e).__name__})')
        return

    # create systemd unit
    cmd = f'podman generate systemd --restart-policy=always --files --start-timeout=60 --stop-timeout=60'
    if 'requires' in config:
        for unit in config['requires']:
            cmd += f' --after={unit} --requires={unit}'
    cmd += f' --name "{cont_name}"'

    try:
        shell(cmd)
        shell('mkdir -p ~/.config/systemd/user')
        shell(f'mv "container-{cont_name}.service" ~/.config/systemd/user/"{cont_name}.service"')
    except CalledProcessError as e:
        print(f'ERROR: Creating systemd service file failed! See {LOG_FILE} for details.')
        logger.error(f'Creating systemd service file failed with ({type(e).__name__})')
        return

    try:
        shell('systemctl --user daemon-reload')
        shell(f'systemctl --user enable "{cont_name}.service"')
        shell(f'systemctl --user start "{cont_name}.service"')
    except CalledProcessError as e:
        print(f'ERROR: Starting systemd service failed! See {LOG_FILE} for details.')
        logger.error(f'Starting systemd service failed with ({type(e).__name__})')
        return

    # create script for starting root shell
    path = f'{BASE_PATH}/{cont_name}.sh'
    try:
        with open(path, 'w') as f:
            f.write(f'#!/bin/bash\n\npodman exec -it "{cont_name}" /bin/bash\n')
        shell(f'chmod u+x {path}')
        print(f'Run {cont_name}.sh to get a root shell inside the container.')
    except Exception as e:
        print(f'ERROR: Creation of shell script at {path} failed. See file {LOG_FILE} for details.')
        logger.error(f'Creation of shell script at {path} failed with ({type(e).__name__})')

    # success
    print(f'Container {cont_def} now running. Systemd service name is "{cont_name}.service".')


def subcmd_list(args) -> None:
    """
    List available image definitions, images, container definitions, and containers.

    Parameters
    ----------
    args : any
        Arguments passed from the command line interface.

    Returns
    -------
    None
        This function prints the available images, image definitions, container definitions,
        and existing containers to the console.
    """

    # list available image definitions
    img_defs = get_img_defs()
    print(f'{COLOR_BOLD}available image definitions:{COLOR_RESET}')
    for img_def in img_defs:
        print(f'  {img_def}')
    if not img_defs:
        print('  none')

    # list available images
    imgs = get_imgs()
    print(f'{COLOR_BOLD}existing images{COLOR_RESET} ("podman image ls" for details):')
    for repo, name, tag in imgs:
        if tag != '':
            print(f'  {repo}/{name}:{tag}')
        else:
            print(f'  {repo}/{name} (no tag)')
    if not imgs:
        print('  none')

    # list container definitions
    cont_defs = get_cont_defs()
    print(f'{COLOR_BOLD}available container definitions:{COLOR_RESET}')
    for cont_def in cont_defs:
        print(f'  {cont_def}')
    if not cont_defs:
        print('  none')

    # list existing containers
    conts = get_conts()
    print(f'{COLOR_BOLD}existing containers{COLOR_RESET} ("podman ps -a" for details):')
    for cont_name, img_name in conts:
        print(f'  {cont_name} (using image {img_name})')
    if not conts:
        print('  none')


def subcmd_load(args):

    # ask for image name
    print(f'{COLOR_BOLD}Which image do you want to download?{COLOR_RESET}')
    choice = choose(DOWNLOAD_NAMES, 0)
    name = DOWNLOAD_NAMES[choice]

    # download image
    url = DOWNLOAD_URL.replace('DOWNLOAD_NAME', name)
    filename = url.rsplit('/', maxsplit=1)[-1]

    try:
        print(f'Downloading {url} (this may take several minutes)...')
        shell(f'wget {url}')

        print('Unpacking image file...')
        shell(f'gunzip {filename}')

        filename = filename.rsplit('.', maxsplit=1)[0]  # strip .gz

        print(f'Loading image file {filename}...')
        shell(f'podman load --input="{filename}"')
        print('...done')
    except (KeyboardInterrupt, CalledProcessError, ValueError) as e:
        print(f'ERROR: Image download, unpacking or loading failed! See file {LOG_FILE} for details.')
        logger.error(f'Image download, unpacking or loading failed with ({type(e).__name__})')
        shell(f'rm {filename}')


def subcmd_remove(args):

    # choose container
    cont_names = [cont_name for cont_name, img_name in get_conts()]
    if not cont_names:
        print('There are no Ananke containers!')
        return

    print(f'{COLOR_BOLD}Which container shall be removed?{COLOR_RESET}')
    choice = choose(items=cont_names, default=0)
    cont_name = cont_names[choice]

    # load container config
    path = f'{BASE_PATH}/{CONT_DEF_DIR}/{cont_name[len(CONT_PREFIX):]}/{CONFIG_FILE}'
    config = load_config(path=path)
    if not config:
        print(f'Could not read container config file {path}. Do you want to remove the container nevertheless?')
        if ask_yes(False):
            config = dict()
        else:
            print('Not removing container.')
            return

    # add default volumes
    if 'volumes' not in config:
        config['volumes'] = []
    config['volumes'].extend(DEFAULT_VOLUMES)

    # ask user for transfer of volume ownership
    print(f'{COLOR_BOLD}You may now transfer ownership of files in container volumes to you.'
          f'This simplifies modifying and deleting files created during container runtime, but may cause troubles if you plan to reuse volumes in a new container.'
          f'Changes won\'t be applied immediately, but only after confirming container removal.{COLOR_RESET}')
    transfer_paths = []
    for src, dest in config['volumes']:
        print(f'Transfer ownership of volume\n  "{src}" (host) > "{dest}" (container)\nto you?')
        if ask_yes(False):
            transfer_paths.append(dest)

    # ask user for container restart
    cont_running = False
    if transfer_paths:
        output = shell('podman inspect --format "{{.State.Running}}"' + f' "{cont_name}"')
        cont_running = (len(output) > 0 and output[0].startswith('true'))
        if not cont_running:
            print(f'{COLOR_BOLD}You chose to transfer ownership of some volumes, but the container isn\'t running at the moment.'
                  f'The container will be started to transfer ownership.'
                  f'In rare situations this may cause security issues due to opening the container\'s port. Proceed?{COLOR_RESET}')
            if not ask_yes(True):
                print('Aborting. Not removing container.')
                return

    # ask user for final confirmation
    print(f'{COLOR_BOLD}Do you really want to remove container {cont_name}? {COLOR_RED}This may cause data loss!{COLOR_RESET}')
    if not ask_yes(False):
        print('Not removing container.')
        return

    # transfer volume ownership
    if transfer_paths:
        if not cont_running:
            try:
                shell(f'systemctl --user start "{cont_name}.service"')
            except CalledProcessError as e:
                print(f'ERROR: Starting container failed! See {LOG_FILE} for details. Not removing container.')
                logger.error(f'Starting container failed with ({type(e).__name__})')
                return

        for path in transfer_paths:
            try:
                shell(f'podman exec -it "{cont_name}" bash -c "chown -R root:root \\"{path}\\""')
            except CalledProcessError as e:
                print(f'ERROR: Ownership of {path} in container could not be transferred! See {LOG_FILE} for details. Not removing container.')
                logger.error(f'Changing ownership of {path} in container failed with ({type(e).__name__})')
                return

    # remove systemd service
    try:
        shell(f'systemctl --user stop "{cont_name}.service"')
        shell(f'systemctl --user disable "{cont_name}.service"')
        shell(f'rm ~/.config/systemd/user/"{cont_name}.service"')
    except CalledProcessError as e:
        print(f'ERROR: Ownership of {path} in container could not be transferred! See {LOG_FILE} for details. Not removing container.')
        logger.error(f'Changing ownership of {path} in container failed with ({type(e).__name__})')

    # remove Podman container
    try:
        shell(f'podman rm "{cont_name}"')
    except CalledProcessError as e:
        print(f'ERROR: Removing container failed! See {LOG_FILE} for details.')
        logger.error(f'Removing container failed with ({type(e).__name__})')
        return

    # remove shell script
    try:
        path = f'{BASE_PATH}/{cont_name}.sh'
        shell(f'rm {path}')
    except CalledProcessError as e:
        print(f'ERROR: Removing shell script failed! See {LOG_FILE} for details.')
        logger.error(f'Removing shell script failed with ({type(e).__name__})')

    # success
    print(f'Container {cont_name} has been successfully removed.')


def main():

    global logger

    # set up logging to log file
    path = f'{BASE_PATH}/{LOG_FILE}'
    try:
        handler = logging.FileHandler(path, mode='w')
        handler.setFormatter(logging.Formatter(LOG_FORMAT))
        logger.addHandler(handler)
    except Exception as e:
        print(f'ERROR: Creating log file failed ({e})! Aborting...')
    logger.setLevel(logging.INFO)
    logger.info('Logging initialized.')

    # initialize argument parser
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        title='subcommands',
        description='build, list ("ananke SUBCOMMAND -h" for details)'
    )

    # subparser for build command
    parser_build = subparsers.add_parser(
        'build',
        help='build an image'
    )
    parser_build.set_defaults(func=subcmd_build)

    # subparser for create command
    parser_create = subparsers.add_parser(
        'create',
        help='create and start a container'
    )
    parser_create.set_defaults(func=subcmd_create)

    # subparser for list command
    parser_list = subparsers.add_parser(
        'list',
        help='list images and containers'
    )
    parser_list.set_defaults(func=subcmd_list)

    # subparser for load command
    parser_load = subparsers.add_parser(
        'load',
        help='download image from Ananke website'
    )
    parser_load.set_defaults(func=subcmd_load)

    # subparser for remove command
    parser_remove = subparsers.add_parser(
        'remove',
        help='stop and remove a container'
    )
    parser_remove.set_defaults(func=subcmd_remove)

    # execute command
    args = parser.parse_args()
    if 'func' in args:
        args.func(args)
    else:
        parser.print_usage()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\nOperation interrupted by user. Exiting gracefully.')
