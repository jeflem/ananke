{% extends "base.html.jinja" %}

{% block head %}
<script>
const data = {{ data | tojson }};
console.log(data);

function showPreflightError() {
    const error = "{{ data.preflight_error }}";
    if (error) {
        document.getElementById("preflight-error").style.display = "block";
        document.getElementById("preflight-error-heading").innerText = error;
        document.getElementById("content").style.display = "none";
    }
}

async function getConfig(onLoad = false) {
    const url = `${data.url}/config`;
    const params = { user: "{{ data.user }}" };

    try {
        const response = await fetch(`${url}?${new URLSearchParams(params)}`, {
            method: 'GET',
            mode: 'cors',
            headers: {'Content-Type': 'application/json'}
        });

        const requestData = await response.json();
        return requestData;

    } catch (error) {
        console.error('Error fetching content:', error);
    }
}

async function getContent(context, dropdownID, importButtonID = "", onLoad = false) {
    const url = `${data.url}/${context}`;
    const params = { user: "{{ data.user }}" };
    const dropdownElement = document.getElementById(dropdownID);
    const importButton = importButtonID ? document.getElementById(importButtonID) : null;

    dropdownElement.innerHTML = "";

    try {
        const response = await fetch(`${url}?${new URLSearchParams(params)}`, {
            method: 'GET',
            mode: 'cors',
            headers: {'Content-Type': 'application/json'}
        });

        const requestData = await response.json();

        if (response.ok) {
            requestData.names.forEach((name, i) => {
                const option = new Option(name, requestData.paths[i]);
                dropdownElement.add(option);
            });
            dropdownElement.disabled = false;
            if (importButton) importButton.disabled = false;
        } else {
            handleNoContent(dropdownElement, context, importButton, requestData.message, onLoad);
        }
    } catch (error) {
        console.error('Error fetching content:', error);
    }
}

function handleNoContent(dropdown, context, importButton, message, onLoad) {
    const option = new Option(`No ${context} found.`, "None");
    dropdown.add(option);
    dropdown.disabled = true;
    if (importButton) importButton.disabled = true;

    if (!onLoad) {
        const toastStyle = message === 'NoContentError' ? 'verified' : 'error';
        const toastMessage = message === 'NoContentError'
            ? `No content found while retrieving list of ${context}.`
            : `${message} while retrieving list of ${context}.`;

        showToast('Info', toastMessage, '3s', toastStyle);
    }
}

function showToast(title, content, dismissAfter, style) {
    toasts.push({ title, content, dismissAfter, style });
}

async function sendGrades() {
    await performAction('grades', 'Sending grades in progress.', 'Grades sent successfully.');
}

async function importContent(context) {
    // Get FROM path.
    const dropdown = document.getElementById(`${context}s-dropdown`);
    const contentPath = dropdown.value;

    const activCourseDropdown = document.getElementById("active-courses-dropdown");
    const activeCoursePath = activCourseDropdown.value;

    await performAction(
        `${context}s`,
        `Importing ${context}...`,
        `${context.charAt(0).toUpperCase() + context.slice(1)} imported successfully.`,
        { fromPath: contentPath, toPath: activeCoursePath }
    );
}

async function executeOperation(method) {
    const activeCourseDropdown = document.getElementById("active-courses-dropdown");
    const activeCoursePath = activeCourseDropdown.value;
    const activeCourseName = activeCourseDropdown.options[activeCourseDropdown.selectedIndex].text;

    const operationMap = { 'PUT': 'backup', 'PATCH': 'reset', 'DELETE': 'deletion' };

    if ( method === 'PUT' ) {
        bodyData = { name: activeCourseName, path: activeCoursePath }
    } else {
        bodyData = { path: activeCoursePath }
    }

    await performAction('courses', `Course ${operationMap[method]} in progress...`, `Course ${operationMap[method]} successful.`, bodyData, method);
}


async function performAction(endpoint, pendingMessage, successMessage, bodyData = {}, method = 'POST') {
    showToast('Pending', pendingMessage, '3s', 'verified');

    try {
        const response = await fetch(`${data.url}/${endpoint}`, {
            method,
            mode: 'cors',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ user: "{{ data.user }}", ...bodyData })
        });

        const requestData = await response.json();

        if (response.ok) {
            showToast('Success', requestData.message || successMessage, '3s', 'success');
        } else {
            throw new Error(requestData.message);
        }
    } catch (error) {
        showToast('Error', `${error.message} while processing request.`, '3s', 'error');
    }
}

window.onload = async function() {
    showPreflightError();

    const config = await getConfig(true);
    const gradingScope = config.grading_scope;
    const activeCoursesRefreshButton = document.getElementById("active-courses-refresh-button");

    const contexts = [
        { context: "courses", dropdownID: "courses-dropdown", buttonID: "import-course-button" },
        { context: "assignments", dropdownID: "assignments-dropdown", buttonID: "import-assignment-button" },
        { context: "problems", dropdownID: "problems-dropdown", buttonID: "import-problem-button" },
        { context: gradingScope === "current" ? "courses/current" : "courses/active", dropdownID: "active-courses-dropdown" }
    ];

    if (gradingScope === "current") {
        activeCoursesRefreshButton.style.display = 'none';
    } else {
        activeCoursesRefreshButton.style.display = 'inline-block';
    }

    for (let ctx of contexts) {
        await getContent(ctx.context, ctx.dropdownID, ctx.buttonID, true);
    }
}
</script>
{% endblock %}

{% block body %}
<!-- This div shows, if there is an error during preflight. -->
<div id="preflight-error" style="display: none;">
    <h4 id="preflight-error-heading" style="color: red; font-size: 32px;"></h4>
    <p style="color: red; font-size: 24px;">
        There was an error during the loading of the page. Please see the logs or contact your administrator for further information.
        If there is an error in the code please write an issue on GitHub.
    </p>
</div>

<!-- This div contains all elements (texts, buttons, ...) necessary for grading, course-, assignment- and problem-handling. -->
<div id="content">
    <h4>
        Select active course:
    </h4>

    <p>
        Please choose the course that you wish to set as your <strong class="light-grey-background">active course</strong>.
        The active course serves as the reference point for all operations you perform within this platform.

        <ul style="text-align: left;">
            <li><strong class="light-grey-background">Import Operations:</strong> When importing assignments, problems, or other content, the active course will automatically be selected as the destination where these items will be copied.</li>
            <li><strong class="light-grey-background">Management Operations:</strong> For tasks such as backup, reset, or delete, the active course is the one that will be affected. This means the selected course will be backed up, reset to its initial state, or removed entirely, depending on the operation you choose.</li>
        </ul>

        Make sure to select the correct course as your active course to ensure that all operations are performed on the intended course.
    </p>

    <div id="active-courses-dropdown-container">
        <label for="active-courses">Choose active course:</label>
        <select id="active-courses-dropdown" disabled></select>
        <button id="active-courses-refresh-button" onclick="getContent('courses/active', 'active-courses-dropdown')"><i class="fas fa-sync-alt"></i></button>
    </div>
    <hr>

    <h4>
        Send grades to LMS:
    </h4>

    <p>
        This will send all currently available grades of the active course to the LMS.
        Please note, that all currently in the LMS stored grades will be overwritten.
    </p>

    <div id="send-grades" class="button-container" onClick="sendGrades()">
        <button>Send grades!</button>
    </div>
    <hr>

    <h4>
        Import course:
    </h4>

    <p>
        For importing all assignments from an existing course with the associated problem statements.
        This includes running courses as well as back upped ones.
        Please note that only the <strong class="light-grey-background">'source'</strong> version of the assignments will be copied, so that the other versions have to be generated
        within the <strong class="light-grey-background">'Formgrader'</strong>.
        The names of the imported assignments are identical to those of the original assignments, except that the time of the import is added.
        This due to the fact that assignments shall have unique names.
    </p>

    <div id="course-dropdown-container">
        <label for="courses">Choose a course:</label>
        <select id="courses-dropdown" disabled></select>
        <button onclick="getContent('courses', 'courses-dropdown')"><i class="fas fa-sync-alt"></i></button>
        <button id="import-course-button" disabled onclick="importContent('course')">Import</button>
    </div>

    <h4>
        Import assignment:
    </h4>

    <p>
        For importing a single assignment from a running course or from the backup folder.
        Please note that only the <strong class="light-grey-background">'source'</strong> version of the assignment will be copied, so that the other versions have to be generated
        within the <strong class="light-grey-background">'Formgrader'</strong>.
        The name of the imported assignment is identical to the of the original assignments, except that the time of the import is added.
        This due to the fact that assignments shall have unique names.
    </p>

    <div id="assignment-dropdown-container">
        <label for="assignments">Choose a assignment:</label>
        <select id="assignments-dropdown" disabled></select>
        <button onclick="getContent('assignments', 'assignments-dropdown')"><i class="fas fa-sync-alt"></i></button>
        <button id="import-assignment-button" disabled onclick="importContent('assignment')">Import</button>
    </div>

    <h4>
        Import problem:
    </h4>

    <p>
        For importing a single problem statement from a running course or from the backup folder.
        This assignment will be created as well as the folder within your home directory.
        The name of the imported problem statement is identical to the of the original one, except that the time of the import is added.
        This due to the fact that problem statements shall have unique names.
    </p>

    <div id="problem-dropdown-container">
        <label for="problems">Choose a problem:</label>
        <select id="problems-dropdown" disabled></select>
        <button onclick="getContent('problems', 'problems-dropdown')"><i class="fas fa-sync-alt"></i></button>
        <button id="import-problem-button" disabled onclick="importContent('problem')">Import</button>
    </div>
    <hr>

    <div class="inline-container">
        <div class="inline-container-child">
            <h4 class="inline-container-h4">
                Backup course:
            </h4>

            <p>
                The current course will be backed up to the user directory ('var/lib/private/your-user-name/').
                The actual time is appended for distinguishability.
                This backed up course will be available to import via this website (after refreshing the dropdown lists) and from the kore extension in JupyterLab.
            </p>

            <div class="button-container">
                <button onClick="executeOperation('PUT')">Backup course!</button>
            </div>
        </div>

        <div class="inline-container-child">
            <h4 class="inline-container-h4">
                Reset course:
            </h4>

            <p>
                This will reset the course to the initial state.
                Please note, that everything will be deleted.
                We advise to backup the course beforehand.
            </p>

            <div class="button-container">
                <button onClick="executeOperation('PATCH')">Reset course!</button>
            </div>
        </div>

        <div class="inline-container-child">
            <h4 class="inline-container-h4">
                Delete course:
            </h4>

            <p>
                This will delete the entire active course, which will delete all data and remove the associated service from the JupyterHub database.
                The JupyterHub will be restarted within a few seconds for the deletion of the course to take effect.
                Please make sure, that you saved all necessary data.
                You may use the backup functionality for this.
            </p>

            <div class="button-container">
                <button onClick="executeOperation('DELETE')">Delete course!</button>
            </div>
        </div>
    </div>
</div>

<script>
// Loading the notifications template, where the toast notifications are declared as class Toasts().
{% include 'notifications.html.jinja' %}
const toasts = new Toasts({
    width: 300,
    timing: 'ease',
    duration: '.5s',
    dimOld: false,
    position: 'bottom-right' // top-left | top-center | top-right | bottom-left | bottom-center | bottom-right
});
</script>
{% endblock %}